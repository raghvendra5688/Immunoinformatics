}
for (k in 1:ncol(mat)) {
candidate_cols <- setdiff(1:ncol(mat), exclude_cols)
problem_col_combs <- NULL
for (i in candidate_cols) {
i_idx <- which(candidate_cols == i)
for (j in candidate_cols[i_idx:length(candidate_cols)]) {
if (sum(!is.na(mat[, i]) & !is.na(mat[, j])) <= min_shared_fields) {
problem_col_combs <- rbind(problem_col_combs, c(i, j))
}
}
}
if (is.null(problem_col_combs)) break
exclude_cols <- c(exclude_cols,
as.integer(names(which.max(table(problem_col_combs)))))
}
return(list('row' = exclude_rows, 'column' = exclude_cols))
}
remove_problematic_combs <- function() {
problematic_combs <- identify_problematic_combs(
mat = mat, min_shared_fields = min_shared_fields)
if (!is.null(problematic_combs$row)) {
mat <- mat[-problematic_combs$row, ]
}
if (!is.null(problematic_combs$column)) {
mat <- mat[, -problematic_combs$column]
}
return(mat)
}
formals(remove_problematic_combs) <- formals(identify_problematic_combs)
################################################################################
data_df <- fread("../Results/Catboost_MFP_Feat_Var_supervised_test_predictions.csv",header=T,sep="\t")
data_df <- as.data.frame(data_df)
#Make MAE
data_df$mae <- abs(data_df$labels-data_df$predictions)
data_df$nmae <- data_df$mae/300
#Create the matrix of Normalized MAE values
mae_matrix <- as.matrix(Matrix(table(data_df$dbgap_rnaseq_sample,data_df$inhibitor)))
mae_matrix[mae_matrix==0] <- NA
for (i in 1:nrow(data_df))
{
sample_id <- data_df$dbgap_rnaseq_sample[i]
inhibitor_id <- data_df$inhibitor[i]
nmae_val <- data_df$nmae[i]
mae_matrix[sample_id,inhibitor_id] <- nmae_val
}
mae_matrix
mae_matrix[,"PHT-427"]
boxplot(mae_matrix[,"PHT-427"])
cor(data_df[data_df$inhibitor=="PHT-427",]$predictions,data_df[data_df$inhibitor=="PHT-427",]$labels)
cor(data_df[data_df$inhibitor=="Ventoclax",]$predictions,data_df[data_df$inhibitor=="Ventoclax",]$labels)
cor(data_df[data_df$inhibitor=="Venetoclax",]$predictions,data_df[data_df$inhibitor=="Venetoclax",]$labels)
boxplot(data_df[data_df$inhibitor=="Venetoclax",]$nmae)
# correlations
correlations <- split(data_df, data$inhibitor) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df <- data.frame(drug = names(correlations), correlation = unlist(correlations))
# correlations
correlations <- split(data_df, data_df$inhibitor) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df <- data.frame(drug = names(correlations), correlation = unlist(correlations))
correlations_df
# correlations
correlations <- split(data_df, data_df$inhibitor) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df <- data.frame(correlation = unlist(correlations))
correlations_df
rownames(mae_matrix)
subset_correlations_df <- correlations_df[colnames(mae_matrix),]
subset_correlations_df
library(dplyr)
library(readr)
library(tidyr)
library(gridExtra)
library(ggpubr)
library(ggplot2)
setwd(".")
#Load data
all_data <- read.csv("../Results/Catboost_MFP_Feat_Var_supervised_test_predictions.csv", header = T, sep = "\t")
unique_samples_to_remove <- names(which(table(all_data$dbgap_rnaseq_sample)<=10))
rev_all_data <- all_data[!(all_data$dbgap_rnaseq_sample %in% unique_samples_to_remove),]
unique_drugs_to_remove <- names(which(table(rev_all_data$inhibitor)<=10))
data <- rev_all_data[!(rev_all_data$inhibitor %in% unique_drugs_to_remove),]
sample_counts <- table(data$dbgap_rnaseq_sample)
drug_counts <- table(data$inhibitor)
#Add the count to the drug and sample names
unique_drugs <- names(drug_counts)
unique_samples <- names(sample_counts)
revised_inhibitors <- NULL
revised_samples <- NULL
for (i in 1:nrow(data))
{
revised_inhibitors <- c(revised_inhibitors, paste0(data$inhibitor[i]," [",as.numeric(drug_counts[data$inhibitor[i]]),"]"))
revised_samples <- c(revised_samples, paste0(data$dbgap_rnaseq_sample[i]," [",as.numeric(sample_counts[data$dbgap_rnaseq_sample[i]]),"]"))
}
data$inhibitors <- revised_inhibitors
data$samples <- revised_samples
# correlations
correlations <- split(data, data$inhibitors) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df <- data.frame(drug = names(correlations), correlation = unlist(correlations))
correlations_df <- correlations_df[order(-correlations_df$correlation), ]
#View(correlations_df)
calculate_rsquared <- function(data) {
model <- lm(data$labels ~ data$predictions, data = data)
rsquared <- summary(model)$r.squared
return(rsquared)
}
# Calculate R-squared for each drug
rsquared <- tapply(data$inhibitors, data$inhibitors, function(d) {
calculate_rsquared(data[data$inhibitors == d, ])
})
# Combine R-squared values into a dataframe
rsquared_df <- data.frame(drug = names(rsquared), r_squared = unlist(rsquared))
#View(rsquared_df)
data_drug <- merge(correlations_df,rsquared_df)
View(data_drug)
#write.table(data_drug, file = "drug_correlations.txt", sep = "\t", quote = FALSE, row.names = FALSE)
#for pateints Rsquare calculation
calculate_rsquared_2 <- function(data) {
model <- lm(data$labels ~ data$predictions, data = data)
rsquared_2 <- summary(model)$r.squared
return(rsquared_2)
}
# Calculate R-squared for each drug
rsquared_2 <- tapply(data$samples, data$samples, function(d) {
calculate_rsquared_2(data[data$samples == d, ])
})
#View(rsquared_df)
correlations <- split(data, data$samples) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df_p <- data.frame(patients = names(correlations), r = unlist(correlations))
# Combine R-squared values into a dataframe
rsquared_df_p <- data.frame(patients = names(rsquared_2), r_squared = unlist(rsquared_2))
#View(rsquared_df_p)
data_sam <- merge(correlations_df_p,rsquared_df_p)
#write.table(data_sam, file = "sample_correlations.txt", sep = "\t", quote = FALSE, row.names = FALSE)
#data_sam <- read.table("samples_correlations.txt", header = T, sep = "\t")
data_sam <- arrange(data_sam, desc(data_sam$r))
data_sam <- na.omit(data_sam)
top_10_sam<- data_sam %>%
arrange(desc(r)) %>%
slice(1:10)
#write.table(top_10_sam_1, file = "top10_samples_correlations.txt", sep = "\t", quote = FALSE, row.names = FALSE)
down_10_sam <- data_sam %>%
arrange(r) %>%
slice(1:10)
View(down_10_sam)
#write.table(down_10_sam, file = "bottom10_sam_correlations.txt", sep = "\t", quote = FALSE, row.names = FALSE)
#top_10_sam <- read.table("top10_samples_correlations.txt", header = T)
top_10_sam$patients <- factor(top_10_sam$patients)
top_10_sam <- top_10_sam %>%
arrange(desc(r))
top_10_sam
top_10_sam$patient_order <- factor(top_10_sam$patients, levels = top_10_sam$patients)
data_long_1 <- top_10_sam %>%
pivot_longer(cols = c(r, r_squared),
names_to = "Correlation Type",
values_to = "Correlation")
View(data_long_1)
# Create the side-by-side bar plot
sam_plot_1 <-ggplot(data_long_1, aes(x = patient_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "A",x = "Top 10 Patients",
y = "Correlation") +
scale_fill_manual(values = c("r" = "blue", "r_squared" = "red"),
labels = c("r" = "r", "r_squared" = expression(R^2))) +
theme_minimal() + theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
sam_plot_1
#down_10_sam <- read.table("bottom10_sam_correlations.txt", header = T)
down_10_sam$patients <- factor(down_10_sam$patients)
down_10_sam <- down_10_sam %>%
arrange(desc(r))
down_10_sam$patient_order <- factor(down_10_sam$patients, levels = down_10_sam$patients)
data_long_2 <- down_10_sam %>%
pivot_longer(cols = c(r, r_squared),
names_to = "Correlation Type",
values_to = "Correlation")
View(data_long_2)
# Create the side-by-side bar plot
sam_plot_2 <-ggplot(data_long_2, aes(x = patient_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "B", x = "Bottom 10 Patients",
y = "Correlation") +
scale_fill_manual(values = c("r" = "blue", "r_squared" = "red"),
labels = c("r" = "r", "r_squared" = expression(R^2))) +
theme_minimal() + theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
sam_plot_2
#data_drug <- arrange(data_drug_2, desc(data_drug_2$correlation))
data_drug <- na.omit(data_drug)
top_10_drug <- data_drug %>%
arrange(desc(correlation)) %>%
slice(1:10)
View(top_10_drug)
#write.table(top_10_drug_1, file = "top10_drugs_correlations.txt", sep = "\t", quote = FALSE, row.names = FALSE)
down_10_drug <- data_drug %>%
arrange(correlation) %>%
slice(1:10)
View(down_10_drug)
#write.table(down_10_drug, file = "bottom10_drug_correlations.txt", sep = "\t", quote = FALSE, row.names = FALSE)
#top_10_drug <- read.table("top10_drugs_correlations.txt", header = T, sep = "\t")
top_10_drug$drug <- factor(top_10_drug$drug)
top_10_drug <- top_10_drug %>%
arrange(desc(correlation))
top_10_drug
top_10_drug$drug_order <- factor(top_10_drug$drug, levels = top_10_drug$drug)
data_long_3 <- top_10_drug %>%
pivot_longer(cols = c(correlation, r_squared),
names_to = "Correlation Type",
values_to = "Correlation")
View(data_long_3)
# Create the side-by-side bar plot
drug_plot_1 <-ggplot(data_long_3, aes(x = drug_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "C",x = "Top 10 drug",
y = "Correlation") +
scale_fill_manual(values = c("correlation" = "blue", "r_squared" = "red"),
labels = c("correlation" = "r", "r_squared" = expression(R^2))) +
theme_minimal() + theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
drug_plot_1
#down_10_drug <- read.table("bottom10_drug_correlations.txt", header = T, sep = "\t")
#View(down_10_drug)
down_10_drug$drug <- factor(down_10_drug$drug)
down_10_drug <- down_10_drug %>%
arrange(desc(correlation))
down_10_drug$drug_order <- factor(down_10_drug$drug, levels = down_10_drug$drug)
data_long_4 <- down_10_drug %>%
pivot_longer(cols = c(correlation, r_squared),
names_to = "Correlation Type",
values_to = "Correlation")
View(data_long_4)
# Create the side-by-side bar plot
drug_plot_2 <- ggplot(data_long_4, aes(x = drug_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "D", x = "Bottom 10 drug", y = "Correlation") +
scale_fill_manual(values = c("correlation" = "blue", "r_squared" = "red"),
labels = c("correlation" = "r", "r_squared" = expression(R^2))) +
theme_minimal() +
theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
drug_plot_2
final = ggarrange(sam_plot_1, sam_plot_2,drug_plot_1,drug_plot_2, nrow=2, ncol = 2, common.legend = TRUE, legend="right")
drug_plot_2 <- ggplot(data_long_4, aes(x = drug_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "D", x = "Bottom 10 drug", y = "Correlation") +
scale_fill_manual(values = c("correlation" = "blue", "r_squared" = "red"),
labels = c("correlation" = "r", "r_squared" = expression(R^2))) +
theme_minimal() + ylim(c(-0.25,0.25))
theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
drug_plot_2
final = ggarrange(sam_plot_1, sam_plot_2,drug_plot_1,drug_plot_2, nrow=2, ncol = 2, common.legend = TRUE, legend="right")
final
drug_plot_1 <-ggplot(data_long_3, aes(x = drug_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "C",x = "Top 10 drug",
y = "Correlation") +
scale_fill_manual(values = c("correlation" = "blue", "r_squared" = "red"),
labels = c("correlation" = "r", "r_squared" = expression(R^2))) +
theme_minimal() + theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
drug_plot_1
#down_10_drug <- read.table("bottom10_drug_correlations.txt", header = T, sep = "\t")
#View(down_10_drug)
down_10_drug$drug <- factor(down_10_drug$drug)
down_10_drug <- down_10_drug %>%
arrange(desc(correlation))
down_10_drug$drug_order <- factor(down_10_drug$drug, levels = down_10_drug$drug)
data_long_4 <- down_10_drug %>%
pivot_longer(cols = c(correlation, r_squared),
names_to = "Correlation Type",
values_to = "Correlation")
View(data_long_4)
# Create the side-by-side bar plot
drug_plot_2 <- ggplot(data_long_4, aes(x = drug_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "D", x = "Bottom 10 drug", y = "Correlation") +
scale_fill_manual(values = c("correlation" = "blue", "r_squared" = "red"),
labels = c("correlation" = "r", "r_squared" = expression(R^2))) +
theme_minimal() + ylim(c(-0.25,0.25))
theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
drug_plot_2
drug_plot_2 <- ggplot(data_long_4, aes(x = drug_order, y = Correlation, fill = `Correlation Type`)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = NULL) +
labs(title = "D", x = "Bottom 10 drug", y = "Correlation") +
scale_fill_manual(values = c("correlation" = "blue", "r_squared" = "red"),
labels = c("correlation" = "r", "r_squared" = expression(R^2))) +
theme_minimal() + ylim(c(-0.25,0.25))+
theme(plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
drug_plot_2
final = ggarrange(sam_plot_1, sam_plot_2,drug_plot_1,drug_plot_2, nrow=2, ncol = 2, common.legend = TRUE, legend="right")
ggsave("../Results/comparision_of_correlations_MFP_based.pdf", final, width = 10, height = 7, units = "in", dpi = 300)
dev.off()
gc()
gc()
gc()
library(dplyr)
library(ggplot2)
library(ComplexHeatmap)
library(data.table)
library(circlize)
library(colorspace)
library(RColorBrewer)
library(Matrix)
#Setwd
setwd(".")
identify_problematic_combs <- function(mat, min_shared_fields = 1) {
exclude_rows <- NULL
exclude_cols <- NULL
stopifnot(is.matrix(mat))
## Loop over candidate removals
for (k in 1:nrow(mat)) {
candidate_rows <- setdiff(1:nrow(mat), exclude_rows)
problem_row_combs <- NULL
for (i in candidate_rows) {
i_idx <- which(candidate_rows == i)
for (j in candidate_rows[i_idx:length(candidate_rows)]) {
if (sum(!is.na(mat[i, ]) & !is.na(mat[j, ])) <= min_shared_fields) {
problem_row_combs <- rbind(problem_row_combs, c(i, j))
}
}
}
if (is.null(problem_row_combs)) break
exclude_rows <- c(exclude_rows,
as.integer(names(which.max(table(problem_row_combs)))))
}
for (k in 1:ncol(mat)) {
candidate_cols <- setdiff(1:ncol(mat), exclude_cols)
problem_col_combs <- NULL
for (i in candidate_cols) {
i_idx <- which(candidate_cols == i)
for (j in candidate_cols[i_idx:length(candidate_cols)]) {
if (sum(!is.na(mat[, i]) & !is.na(mat[, j])) <= min_shared_fields) {
problem_col_combs <- rbind(problem_col_combs, c(i, j))
}
}
}
if (is.null(problem_col_combs)) break
exclude_cols <- c(exclude_cols,
as.integer(names(which.max(table(problem_col_combs)))))
}
return(list('row' = exclude_rows, 'column' = exclude_cols))
}
remove_problematic_combs <- function() {
problematic_combs <- identify_problematic_combs(
mat = mat, min_shared_fields = min_shared_fields)
if (!is.null(problematic_combs$row)) {
mat <- mat[-problematic_combs$row, ]
}
if (!is.null(problematic_combs$column)) {
mat <- mat[, -problematic_combs$column]
}
return(mat)
}
formals(remove_problematic_combs) <- formals(identify_problematic_combs)
################################################################################
data_df <- fread("../Results/Catboost_MFP_Feat_Var_supervised_test_predictions.csv",header=T,sep="\t")
data_df <- as.data.frame(data_df)
#Make MAE
data_df$mae <- abs(data_df$labels-data_df$predictions)
data_df$nmae <- data_df$mae/300
#Create the matrix of Normalized MAE values
mae_matrix <- as.matrix(Matrix(table(data_df$dbgap_rnaseq_sample,data_df$inhibitor)))
mae_matrix[mae_matrix==0] <- NA
for (i in 1:nrow(data_df))
{
sample_id <- data_df$dbgap_rnaseq_sample[i]
inhibitor_id <- data_df$inhibitor[i]
nmae_val <- data_df$nmae[i]
mae_matrix[sample_id,inhibitor_id] <- nmae_val
}
rev_mae_matrix <- remove_problematic_combs(mae_matrix, min_shared_fields=50)
# correlations
correlations <- split(data_df, data_df$inhibitor) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df <- data.frame(correlation = unlist(correlations))
subset_correlations_df <- correlations_df[colnames(mae_matrix),]
correlations_df
subset_correlations_df
subset_correlations_df <- correlations_df[rownames(correlations_df) %in% colnames(mae_matrix),]
subset_correlations_df
correlations <- split(data_df, data_df$inhibitor) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df <- data.frame(drug = names(correlations),correlation = unlist(correlations))
subset_correlations_df <- correlations_df[rownames(correlations_df) %in% colnames(mae_matrix),]
subset_correlations_df
correlation_vec <- subset_correlations_df$correlation
names(correlation_vec) <- rownames(subset_correlations_df)
col_fun = colorRamp2(c(0,0.125,0.25),c("blue","white","red"))
col_fun2 = colorRamp(c(0,0.4,0.8),c("blue","white","red"))
row_ha = rowAnnotation(r=correlation_vec, col=col_fun2)
col_fun = colorRamp2(c(0,0.125,0.25),c("blue","white","red"))
col_fun2 = colorRamp2(c(0,0.4,0.8),c("blue","white","red"))
row_ha = rowAnnotation(r=correlation_vec, col=col_fun2)
row_ha = rowAnnotation(r=correlation_vec, col=list(correlation_vec=col_fun2))
ht <- ComplexHeatmap::Heatmap(t(rev_mae_matrix),
name="NMAE",
column_title = "Drug vs Patient Heatmap",
na_col = "grey",
rect_gp = gpar(col = "white", lwd = 1),
column_title_gp = gpar(fill = "grey", col = "white", border = "black"),
cluster_columns = T,
show_column_dend = F,
show_row_dend = F,
clustering_distance_rows = "pearson",
clustering_distance_columns = "pearson",
clustering_method_rows = "centroid",
clustering_method_columns = "centroid",
row_names_gp = gpar(fontsize = 8, fontface="plain"),
column_names_gp = gpar(fontsize = 8, fontface="plain"),
right_annotation = row_ha,
col=col_fun)
draw(ht)
# correlations
correlations <- split(data_df, data_df$inhibitor) %>%
lapply(function(data) cor(data$predictions, data$labels, method = "pearson"))
correlations_df <- data.frame(drug = names(correlations),correlation = unlist(correlations))
subset_correlations_df <- correlations_df[rownames(correlations_df) %in% colnames(rev_mae_matrix),]
correlation_vec <- subset_correlations_df$correlation
names(correlation_vec) <- rownames(subset_correlations_df)
# Create a heatmap
################################################################################
col_fun = colorRamp2(c(0,0.125,0.25),c("blue","white","red"))
col_fun2 = colorRamp2(c(0,0.4,0.8),c("blue","white","red"))
row_ha = rowAnnotation(r=correlation_vec, col=list(correlation_vec=col_fun2))
ht <- ComplexHeatmap::Heatmap(t(rev_mae_matrix),
name="NMAE",
column_title = "Drug vs Patient Heatmap",
na_col = "grey",
rect_gp = gpar(col = "white", lwd = 1),
column_title_gp = gpar(fill = "grey", col = "white", border = "black"),
cluster_columns = T,
show_column_dend = F,
show_row_dend = F,
clustering_distance_rows = "pearson",
clustering_distance_columns = "pearson",
clustering_method_rows = "centroid",
clustering_method_columns = "centroid",
row_names_gp = gpar(fontsize = 8, fontface="plain"),
column_names_gp = gpar(fontsize = 8, fontface="plain"),
right_annotation = row_ha,
col=col_fun)
draw(ht)
debugSource("~/TII/Projects/Raghav/Immunoinformatics/scripts/make_heatmap_sample_drug.R")
col_fun = colorRamp2(c(0,0.125,0.25),c("blue","white","red"))
col_fun2 = colorRamp2(c(0,0.4,0.8),c("blue","white","red"))
row_ha = rowAnnotation(r=correlation_vec, col=list(correlation_vec=col_fun2))
ht <- ComplexHeatmap::Heatmap(t(rev_mae_matrix),
name="NMAE",
column_title = "Drug vs Patient Heatmap",
na_col = "grey",
rect_gp = gpar(col = "white", lwd = 1),
column_title_gp = gpar(fill = "grey", col = "white", border = "black"),
cluster_columns = T,
show_column_dend = F,
show_row_dend = F,
clustering_distance_rows = "pearson",
clustering_distance_columns = "pearson",
clustering_method_rows = "centroid",
clustering_method_columns = "centroid",
row_names_gp = gpar(fontsize = 8, fontface="plain"),
column_names_gp = gpar(fontsize = 8, fontface="plain"),
right_annotation = row_ha,
col=col_fun)
draw(ht)
row_ha = rowAnnotation(r=correlation_vec, col=list(r=col_fun2))
ht <- ComplexHeatmap::Heatmap(t(rev_mae_matrix),
name="NMAE",
column_title = "Drug vs Patient Heatmap",
na_col = "grey",
rect_gp = gpar(col = "white", lwd = 1),
column_title_gp = gpar(fill = "grey", col = "white", border = "black"),
cluster_columns = T,
show_column_dend = F,
show_row_dend = F,
clustering_distance_rows = "pearson",
clustering_distance_columns = "pearson",
clustering_method_rows = "centroid",
clustering_method_columns = "centroid",
row_names_gp = gpar(fontsize = 8, fontface="plain"),
column_names_gp = gpar(fontsize = 8, fontface="plain"),
right_annotation = row_ha,
col=col_fun)
draw(ht)
col_fun = colorRamp2(c(0,0.125,0.25),c("blue","white","red"))
col_fun2 = colorRamp2(c(0,0.4,0.8),c("blue","white","red"))
row_ha = rowAnnotation(r=correlation_vec, col=list(r=col_fun2))
pdf("../Results/Drug_vs_Sample_Best_Catboost.pdf", height = 12, width = 16)
ht <- ComplexHeatmap::Heatmap(t(rev_mae_matrix),
name="NMAE",
column_title = "Drug vs Patient Heatmap",
na_col = "grey",
rect_gp = gpar(col = "white", lwd = 1),
column_title_gp = gpar(fill = "grey", col = "white", border = "black"),
cluster_columns = T,
show_column_dend = F,
show_row_dend = F,
clustering_distance_rows = "pearson",
clustering_distance_columns = "pearson",
clustering_method_rows = "centroid",
clustering_method_columns = "centroid",
row_names_gp = gpar(fontsize = 8, fontface="plain"),
column_names_gp = gpar(fontsize = 8, fontface="plain"),
right_annotation = row_ha,
col=col_fun)
draw(ht)
dev.off()
